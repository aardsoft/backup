if [ -z "$NUMBAK" ]; then
    NUMBAK=5
fi

if [ -z "$NEWSTAMP" ]; then
    NEWSTAMP=`date '+%Y-%m-%d.%H:%M:%S'`
fi

# Load the global configuration
loadConfig(){
    if [ -f "/etc/as-backup/config" ]; then
        . /etc/as-backup/config
    fi

    if [ `id -u` -ne 0 ]; then
        if [ -f "$HOME/.config/as-backup/config" ]; then
            . $HOME/.config/as-backup/config
        fi
    fi
}

# Load profile specific settings. Not required if the global configuration
# contains all relevant information for simple setups.
loadProfile(){
    _profile=$1

    if [ `id -u` -ne 0 ]; then
        if [ -f "/etc/as-backup/$_profile" ]; then
            . "/etc/as-backup/$_profile"
        elif [ -f "$HOME/.config/as-backup/$_profile" ]; then
        . "$HOME/.config/as-backup/$_profile"
        else
            echo "Profile $_profile not found";
            exit 1
        fi
    else
        if [ -f "/etc/as-backup/$_profile" ]; then
            . "/etc/as-backup/$_profile"
        else
            echo "Profile $_profile not found";
            exit 1
        fi
    fi

    if [ -z "$PROFILE_NAME" ]; then
        PROFILE_NAME=$_profile
    fi
}

# this should be called after all configuration options, including custom
# script overrides, were processed. Even when not using profiles this should
# be called to validate the global profile.
validateProfile(){
    if [ -z "$TARGET" ]; then
        echo "Backup target (TARGET) not set"
        exit 1
    fi

    if [ -z "$BACKUP_SOURCE" ]; then
        if [ -n "$SOURCE_PATH" ]; then
            echo "Using source path as backup source: $SOURCE_PATH"
            BACKUP_SOURCE=$SOURCE_PATH
        else
            echo "No backup source specified for profile $PROFILE_NAME"
            exit 1
        fi
    fi

    if [ -n "$SOURCE_PATH" ]; then
        SOURCE_PATH=$BACKUP_SOURCE
    fi
}

doMount(){
    if [ -z "$MNT_SRC" ] || [ -z "$MNT_PATH" ]; then
        echo "No mount source or path"
        return 1
    fi
    _options=

    if [ -n "$MNT_OPTS" ]; then
        _options="$_options -o $MNT_OPTS"
    fi

    if [ -n "$MNT_FSTYPE" ]; then
        _options="$_options -t $MNT_FSTYPE"
    fi

    _cmd="mount $_options $MNT_SRC $MNT_PATH"
    `$_cmd`
    return $?
}

doUnmount(){
    if [ -z "$MNT_PATH" ]; then
        echo "No mount path"
        return 1
    fi

    umount -l $MNT_PATH
}

doRotate(){
    SOURCE=`echo $1|sed 's,^/,,'`
    if [ -z "$SOURCE" ]; then echo "doBackup() without SOURCE"; return; fi
    if [ ! -L $TARGET/$SOURCE.current ]; then
        echo "No backup available, not rotating"
        return
    fi
    LATEST=`readlink $TARGET/$SOURCE.current`
    cp -al $LATEST $TARGET/$SOURCE.$NEWSTAMP
    NUMDIRS=`ls -1 -t -r -d $TARGET/$SOURCE.[0-9]*|wc -l`
    if [ $NUMDIRS -gt $NUMBAK ]; then
        DELETE=$((NUMDIRS-NUMBAK))
        echo "Have $NUMDIRS instead of $NUMBAK, deleting $DELETE"
        if [ -z "$DELETE" ]; then
            echo "Empty delete result, skipping deletions."
        else
            for i in `ls -1 -t -r -d $TARGET/$SOURCE.[0-9]*|tail -$DELETE`; do
                echo "Deleting $i"
                rm -Rf $i
            done
        fi
    fi
}

doBackup(){
    SOURCE=$1
    if [ ! -z "$2" ]; then
        SHORTDEST=`echo $2|sed 's,^/,,'`
    else
        SHORTDEST=`echo $SOURCE|sed 's,^/,,'`
    fi
    DEST=$SHORTDEST.$NEWSTAMP
    if [ -z "$SOURCE" ]; then echo "doBackup() without SOURCE"; return; fi
    if [ -z "$EXCLUDE_FILE" ]; then
        rsync -aHx --progress --numeric-ids --delete --delete-excluded $RSYNC_OPTS $SOURCE/./ $TARGET/$DEST
    else
        if [[ "$EXCLUDE_FILE" != /* ]]; then
            if [ -f "/etc/as-backup/$EXCLUDE_FILE" ]; then
                EXCLUDE_FILE="/etc/as-backup/$EXCLUDE_FILE"
                echo "Using $EXCLUDE_FILE"
            elif [ -f "$HOME/.config/as-backup/config/$EXCLUDE_FILE" ]; then
                EXCLUDE_FILE="$HOME/.config/as-backup/config/$EXCLUDE_FILE"
                echo "Using $EXCLUDE_FILE"
            fi
        fi

        if [ ! -f "$EXCLUDE_FILE" ]; then
            echo "Exclude file specified, but not present: $EXCLUDE_FILE"
            exit 1
        fi

        rsync -aHx --progress --numeric-ids --exclude-from "$EXCLUDE_FILE" --delete --delete-excluded $RSYNC_OPTS $SOURCE/./ $TARGET/$DEST
    fi
    ln -sfT $TARGET/$DEST $TARGET/$SHORTDEST.current
}

doCleanup(){
    echo "Cleaning up after $PROFILE_NAME"
    if [ -n "$SOURCE_SRC" ]; then
        MNT_PATH=$SOURCE_PATH doUnmount
    fi
}
